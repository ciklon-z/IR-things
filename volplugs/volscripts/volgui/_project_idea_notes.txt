	2. Run Process Commands
		# A. PSLIST
			1. read through file
				- list PID, list parent PID
				- Check if ID is in the Database
					if not, add ID to database
					if so,
						check start time, offset value
							if same move on
							else
								add ID to Database
			2. look for processes with no parent.
			3. look for processes with no children.
			4. look for processes for Time Asynchronous Events.
		# B. PSSCAN
			1. read through file
				- list PID, list parent PID
				- Check if ID is in the Database
					--snip--
			3. look for processes with no parent.
			4. look for processes with no children.
		# C. PSTREE
			1. read through file
				- list PID, list parent PIDs
				- Check if ID is in the Database
					--snip--
			3. look for processes with no parent.
			4. look for processes with no children.
		# D. PSXVIEW
				- Check if ID is in the Database
					--snip--
					
		E. PS COMPARE
			1. read in: pslist.txt, psscan.txt, pstree.txt, psxview.txt
			2. compare process names
			3. compare process results
			4. display discrepancies
			
		F. envars
			1. run envars and compare the file lengths.

	3.  [processes]	Process Dumps, Comparisons, ...
		A. procexedump -D procexedump/ && procexedump -u -D procexedump_userassist/
		B. compare svchost processes (file size, hash(es))
			i. read from the pslist.txt file for 'svchost' 
				read pslist.txt file |grep svchost
			ii. run comparisons
				a. md5, sha-1, sha-256 hash of the executables
				d. parse those PIDs from the file and compare file size of the executables
				c. note if an executable process is missing form the pslist.txt file.
		C. compare 2 or multiple processes
			i. parse those PIDs from the file and compare md5 hash of the executables
			ii. parse those PIDs from the file and compare sha-1 hash of the executables
			iii. parse those PIDs from the file and compare sha-256 hash of the executables
			iv. parse those PIDs from the file and compare file size of the executables
		D. Compare files sizes.
			Show those that are lower than ......?
		E. Strings Searches.
			1. Create strings of all executables.
				for example: strings files_pexedmp/executable.4320.exe >> files_pexedmp/executable.4320.exe.strings
			2. Generic Search:
				egrep -i ‘update|\.exe|System32|Windows|ip|%d.|image’
			#3.	protocols:
			#	'ftp|telnet|http|GET|POST|PULL|PUT|html|User-Agent|scp|ssh|IRC|irc' 
			4. Compression:
				'Zip|ZIP|zip|tar|gz|rar|tgz'
			5. IP Address: 
				Need to write a regular expression that can search for ip addresses in strings.
			6. Windows Instructions
				GetLayout | SetLayout| LoadLibrary | GetProcAddress | LdrGetProcAddress | LdrLadDll | CreateProcess
			7. Windows DLL files
				Base Services
					kernel.dll
				Advanced Services - registry, windows services, user accounts, 
					advapi32.dll
				Graphics Device Interface
					win32k.sys | gdi32.dll
				User Interface
					user32.dll | comctl32.dll
					
					
					ntdll.dll | wsock32.dll | ws2_32.dll | wininet.dll
					iphlpapi.dll | NsiAllocateAndGetTable | nsi.dll | NsiEnumerateObjectsAllParametersEx | NsiEnumerateObjectsAllParameters | netio.sys | nsiproxy.sys | TcpEnumerateConnections | TcpEnumerateListeners
					iphlpapi.dll | nsi.dll | netio.sys | nsiproxy.sys | tcpip.sys
					VirtualAlloc | CreateRemoteThread | SetWindowsHook
					Page_Execute_ReadWrite
					InternetOpenUrl | InternetReadFile | HttpSendRequest
					
					
					
					Domain regex
						^[a-zA-Z0-9\-\.]+\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$
						^http\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(/\S*)?$
						(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?
						^(http|https|ftp)\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&amp;%\$#\=~])*$
						(?<http>(http:[/][/]|www.)([a-z]|[A-Z]|[0-9]|[/.]|[~])*)
						
						
					SSDT
						egrep -v 'win32k.sys|ntoskrnl.exe'
					
	4.	Netwrk Connections and Settings
			A. Settings
				i. interfaces, settings, addresses, 
					a. was the interface in promiscouous mdoe ?
			B. Connections
				ii. Active, Closed, History?
			C. Cache
				iii. arp cache, dns cache, browser cache, local user temp
			D. 
			to parse netscan later:
				cat text/netscan.txt | grep -E -o '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'
				
				
				grep -E -v '(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^0.)|(^169\.254\.)' | sort | uniq
				
x. DLL Dumps
		a. Take MD5s of each dumped DLL and submit that to VirusTotal.com or other submission sites.
	5. Malfind
	6. LDR Modules
	7. Mutant Scan
	8. File Scan
	9. VAD Dumps

	
	
XI. Registry Dumps
	i. Pull Browser Helper Objects from Memory
		a. pull the BHO key from the registry first: {printkey -K 'Microsoft\Windows\CurrentVersion\Explorer\Browser Helper Objects'}
		b. Resolve the full path by querying the registry again:
				{printkey -K 'Classes\CLSID\{00009E9F-DDD7-AA59-AA7D-AA4B7D6BE000}\InprocServer32'} - (example)
		c. at this point you can dump the specific DLLs and investigate them further.
	
		Some Persistence Mechanisms:
			HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
			HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\Explorer\Run
			HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run 
			HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Terminal Server\Install\Software\Microsoft\Windows\CurrentVersion\Runonce
			HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Terminal Server\Install\Software\Microsoft\Windows\CurrentVersion\Run
			HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
			HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run
			HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce
			HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\RunOnce
			HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
			HKLM\Software\Microsoft\Windows\CurrentVersion\RunServices
			HKLM\Wow6432Node\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
			HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Run
			HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
			HKCU\Software\Microsoft\Windows\CurrentVersion\Run
			HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce
			HKCU\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Terminal Server\Install\Software\Microsoft\Windows\CurrentVersion\Runonce
			HKCU\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Terminal Server\Install\Software\Microsoft\Windows\CurrentVersion\Run
			HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\RunServices
			HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\RunServicesOnce
			HKCU\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Run
			HKCU\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
			HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows
			HKLM\System\CurrentControlSet00#\Services
			HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit
			HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell
			HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Taskman
			HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\System
			HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify
			HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList
			HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components
			HKLM\SOFTWARE\Wow6432Node\Microsoft\Active Setup\Installed Components
			HKLM\Software\Microsoft\Windows\CurrentVersion\Explorer\ShellExecuteHooks
			HKLM\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\ShellExecuteHooks
			HKLM\Software\Microsoft\Windows\CurrentVersion\Explorer\Browser Helper Objects
			HKLM\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\Browser Helper Objects
			HKLM\Software\Microsoft\Windows NT\CurrentVersion\Drivers32
			HKLM\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Drivers32
			HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options
			HKLM\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Image File Execution Options
			HKLM\SOFTWARE\Classes\Exefile\Shell\Open\Command\(Default)
			HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\Appinit_Dlls
			HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows\Appinit_Dlls
			HKLM\SOFTWARE\Microsoft\SchedulingAgent
			HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Shell Extensions\Approved
			HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost
			HKLM\System\CurrentControlSet00#\Control\Session Manager\AppCertDlls
			HKLM\SYSTEM\CurrentControlSet00#\Control\SecurityProviders\SecurityProviders
			HKLM\SYSTEM\CurrentControlSet00#\Control\Lsa\Authentication Packages
			HKLM\SYSTEM\CurrentControlSet00#\Control\Lsa\Notification Packages
			HKLM\SYSTEM\CurrentControlSet00#\Control\Lsa\Security Packages
			HKLM\SYSTEM\ControlSet00#\Control\Session Manager\CWDIllegalInDllSearch
			HKLM\SYSTEM\ControlSet00#\Control\SafeBoot
			HKCU\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell
			HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load
			HKCU\Software\Microsoft\Command Processor\Autorun
			HKCU\Classes\Exefile\Shell\Open\Command\(Default)

	
			
			HKEY_CURRENT_USER\Software\Microsoft\Windows\Currentversion\Explorer\Userassist
				HKCU\Software\Microsoft\Windows\Currentversion\Explorer\Userassist\{GUID}\Count

			HKCU\Local Settings\MuiCache
	
			Ensures that hidden files are not shown in Explorer
				Microsoft\Windows\CurrentVersion\Explorer\Advanced\Folder\Hidden\SHOWALL
			
			Check AutoPLay:
				Software\Microsoft\Windows\CurrentVersion\Policies\Explorer
			
			
Module Ideas

1. 
A. Run process export with proc-exe
B. Run process export with -u

2. 
A. Run md5 on exported files.
		#!/bin/bash
		filename='sample.txt'
		while read -r line
			do
			id=$(cut -c-32 <<< "$line")
			echo $id
			#code for passing id to other script file as parameter
			done < "$filename"

			
			# PE32/MD5-script-o-matic
			# By Sketchymoose
			# verion 1.0
			# This script takes 3 arguments:
			# $1 -> directory of extracted_files
			# $2 -> directory of where you want the VT Results to 
			# $3 -> path of MD5.txt file 
			cd $1
			for i in `file * | grep PE32 | cut -d ":" -f 1`; do md5sum $i >> $3; done
			cd $2
			python SubmitMD5VT.py $2 $3

			
	Can do searches here as well: http://oc.gtisc.gatech.edu:8080/search.cgi?search=
	Just cat on the hash at the end of the URL.
		We can 'wget' all of the files, and then parse out any that are of different sizes, 
		those become what will be presented to the analyst.
					
Compare on others?
	TotalHash:
		http://totalhash.com/search/hash:b01468544c6935d0f443497693bb58ab
		
		
4. 
Run strings on files.
Output
Record date command runs.
Record Case Name
Strngs

5. [ strings compare ]
Grep for web,
Grep for network.
Grep for .......
    First find location.
    Find line number
    Find 20 lines ahead (configurable)
    Find 20 lines below. (Configurable)

Reporting (XML Format default.) csv, txt, .....
md5 comparison. 
Sha1 comparison
A. Engine
B. Link
C  detection rate
D. Tyoe of File
E. Judgement
1. Filename
2. Memory file name
3. Location.
4. File date created
5. File date modified
6. Command run
7. Report Name
8. Case Name
9. Report Date